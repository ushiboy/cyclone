// @flow
declare module '@ushiboy/cyclone' {

  declare export type Action = $Shape<{ type: string }>;
  declare export type NoneAction = { type: 'cyclone$none' };
  declare export type ExtraAction<A> = (extra: any) => A | Promise<A>;

  declare export function none(): NoneAction;

  declare export type Store<S, A> = {
    dispatch(action: A | Promise<A> | ExtraAction<A>): Promise<void>,
    subscribe(listener: () => void): void,
    unsubscribe(listener: () => void): void,
    getState(): S
  };

  declare export type Update<S, A> = (
    state: S,
    action: A
  ) => [S, A | Promise<A> | NoneAction | Array<A | Promise<A> | NoneAction | ExtraAction<A> >];

  declare export function createStore<S, A>(
    initState: S,
    update: Update<S, A>,
    extra?: any
  ): Store<S, A>;

  declare export type ReduceUpdate = (
    state: any,
    action: any,
    ...dependencyState: Array<any>
  ) => [any, any | NoneAction | ExtraAction<any>];

  declare export type ReducerConfig = {
    stateName: string,
    dependencies: string [],
    update: ReduceUpdate
  };

  declare export function reducer(
    stateName: string,
    update: ReduceUpdate
  ): ReducerConfig;
  declare export function reducer(
    stateName: string,
    dependencies: string[],
    update: ReduceUpdate
  ): ReducerConfig;

  declare export function combine<S, A>(
    ...reducerConfig: Array<ReducerConfig>
  ): Update<S, A>;

}
